#!/bin/bash

# Copyright (C) 2014 The MoKee OpenSource Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Originally written by Shane Faulkner
# Severely modified by daavvis (not sure there is much left from orig)

# BuildBot script for MoKee Unofficial Developer builds

# Colorize and add text parameters
red=$(tput setaf 1)             #  red
grn=$(tput setaf 2)             #  green
cya=$(tput setaf 6)             #  cyan
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldblu=${txtbld}$(tput setaf 4) #  blue
bldcya=${txtbld}$(tput setaf 6) #  cyan
txtrst=$(tput sgr0)             # Reset

# Your build source code directory path. In the example below the build source code directory path is in the "home" folder. If your source code directory is on an external HDD it should look like: //media/your PC username/the name of your storage device/path/to/your/source/code/folder

echo -e "${bldblu}"
read -e -p "Enter the path to your build source Directory:${txtrst}" -i "/home/daavvis/mkkk" SAUCE
eval SAUCE=$SAUCE
	while [ ! -d "$SAUCE" ]; do
		echo -e "${txtrst}"
		echo -e "${bldred}BOT Could Not Find That Folder, Please Try Again...${txtrst}"
		read -e -p "${bldblu}Enter the path to your build source Directory: ${txtrst}" -i "/home/daavvis/mkkk" SAUCE
		SAUCE=$SAUCE
	done
echo -e "${bldblu}"
cd $SAUCE
echo "Build Directory Is ${SAUCE}"
echo -e "${txtrst}"

# Add devices for build

echo -e "${txtrst}"
echo -e "${grn}"
read -r -p "what device would you like to build?" response
eval LUNCHCMD[0]=$response
echo ""
echo "Ok building "${LUNCHCMD[0]}""
echo ""
read -r -p "Would You like to build another device  [y or n]" response
echo ""
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
read -r -p "What device would you like to build?" response
echo "Ok building $response"
LUNCHCMD[1]=$response
echo ""
read -r -p "Would You like to build another device  [y or n]" response
echo ""
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	read -r -p "What device would you like to build?" response
	echo "Ok building $response"
	echo ""
	LUNCHCMD[2]=$response
	read -r -p "Would You like to build another device  [y or n]" response
	echo ""
		if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		read -r -p "What device would you like to build?" response
		echo "Ok building $response"
		echo ""
		LUNCHCMD[3]=$response
		read -r -p "Would You like to build another device  [y or n]" response
		echo ""
			if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
			read -r -p "What device would you like to build?" response
			echo "Ok building $response"
			echo ""
			LUNCHCMD[4]=$response
			read -r -p "Would You like to build another device  [y or n]" response
			echo ""
				if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
				read -r -p "What device would you like to build?" response
				echo "Ok building $response"
				echo ""
				LUNCHCMD[5]=$response
				read -r -p "Would You like to build another device  [y or n]" response
				echo ""
					if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
					read -r -p "What device would you like to build?" response
					echo "Ok building $response"
					echo ""
					LUNCHCMD[6]=$response
					read -r -p "Would You like to build another device  [y or n]" response
					echo ""
						if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
						read -r -p "What device would you like to build?" response
						echo "Ok building $response"
						echo ""
						LUNCHCMD[7]=$response
						read -r -p "Would You like to build another device  [y or n]" response
						echo ""
							if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
							read -r -p "What device would you like to build?" response
							echo "Ok building $response"
							echo ""
							LUNCHCMD[8]=$response
							read -r -p "Would You like to build another device  [y or n]" response
							echo ""
								if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
								read -r -p "What device would you like to build?" response
								echo "Ok building $response"
								echo ""
								LUNCHCMD[9]=$response
									echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}", "${LUNCHCMD[5]}", "${LUNCHCMD[6]}", "${LUNCHCMD[7}", "${LUNCHCMD[8]}", "${LUNCHCMD[9]}" moving on.."
								elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
									echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}", "${LUNCHCMD[5]}", "${LUNCHCMD[6]}", "${LUNCHCMD[7}", "${LUNCHCMD[8]}" moving on.."
								else
									echo -e "${txtrst}"
									echo -e "${bldred}"
									echo "Please Press y or n"
									echo -e "${txtrst}"
									exit
								fi
							elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
								echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}", "${LUNCHCMD[5]}", "${LUNCHCMD[6]}", "${LUNCHCMD[7}" moving on.."
							else
								echo -e "${txtrst}"
								echo -e "${bldred}"
								echo "Please Press y or n"
								echo -e "${txtrst}"
								exit
							fi
						elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
							echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}", "${LUNCHCMD[5]}", "${LUNCHCMD[6]}" moving on.."
						else
							echo -e "${txtrst}"
							echo -e "${bldred}"
							echo "Please Press y or n"
							echo -e "${txtrst}"
							exit
						fi
					elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
						echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}", "${LUNCHCMD[5]}" moving on.."
					else
						echo -e "${txtrst}"
						echo -e "${bldred}"
						echo "Please Press y or n"
						echo -e "${txtrst}"
						exit
					fi
				elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
					echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}","${LUNCHCMD[4]}" moving on.."
				else
					echo -e "${txtrst}"
					echo -e "${bldred}"
					echo "Please Press y or n"
					echo -e "${txtrst}"
					exit
				fi
			elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
				echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" "${LUNCHCMD[3]}" moving on.."
			else
				echo -e "${txtrst}"
				echo -e "${bldred}"
				echo "Please Press y or n"
				echo -e "${txtrst}"
				exit
			fi
		elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
			echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}", "${LUNCHCMD[2]}" moving on.."
		else
			echo -e "${txtrst}"
			echo -e "${bldred}"
			echo "Please Press y or n"
			echo -e "${txtrst}"
			exit
		fi
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo "OK, building "${LUNCHCMD[0]}", "${LUNCHCMD[1]}" moving on.."
	else
		echo -e "${txtrst}"
		echo -e "${bldred}"
		echo "Please Press y or n"
		echo -e "${txtrst}"
		exit
	fi
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "OK, building "${LUNCHCMD[0]}" moving on.."
else
	echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
	exit
fi


# Should the finished ROMS be moved out of the output folder?
# For instance External storage, dropbox, or other cloud storage folder?

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
while [ "${MOVE}" = "" ]; do
read -r -p "${grn}Should the finished ROMS be moved to a storage folder? [y or n]" response
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo "Ok, Moving"
		MOVE=y
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		MOVE=n
		echo "Ok, Not Moving"
	else echo -e "${txtrst}"
		echo -e "${bldred}"
		echo "Please Press y or n"
		echo -e "${txtrst}"
	fi
done


# Please fill in below the folder they should be moved to.

echo -e "${txtrst}"
echo -e "${grn}"
	if [ $MOVE = "y" ]; then
		read -e -p "Enter the path to your storage Directory: " -i "//media/daavvis/storage/1foronlyme/4.4.2" STORAGE
		eval STORAGE=$STORAGE
	fi
# Sync repositories before build

echo ""
while [ "$SYNC" = "" ]; do
read -r -p "${grn}Should we sync repositories before build?[y or n]" response
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo "OK, Syncing Repos First, The BUILDBOT will only sync once before starting builds.."
		SYNC=y
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo "ok, not syncing"
		SYNC=n
	else echo -e "${txtrst}"
		echo -e "${bldred}"
		echo "Please Press y or n"
		echo -e "${txtrst}"
	fi
done

# Number for the -j parameter

echo -e "${txtrst}"
echo -e "${grn}"
if [ $SYNC = "y" ]; then
	read -e -p "Enter J Parameter (1 for slow internet 16 for fast): " -i "16" J
	eval J=$J
fi

	
# Do you Want to use ccache?

echo ""
while [ "$CCACHE" = "" ]; do
	read -r -p "${grn}Do you Want to use ccache?[y or n]" response
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo "ok, Using CCACHE..."
		CCACHE=y
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo "ok, not using ccache"
		CCACHE=n
	else echo -e "${txtrst}"
		echo -e "${bldred}"
		echo "Please Press y or n"
		echo -e "${txtrst}"
	fi
done


# REMOVE BUILD PROP (recomended for every build, otherwise the date of the build may not be changed, as well as other variables)

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
while [ "$BP" = "" ]; do
read -r -p "${grn}Do you Want to remove the build prop before the build (recomended)?[y or n]" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "OK, Removing build.prop"
	BP=y
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "ok, not deleting build.prop"
	BP=n
else echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
fi
done

# run mka installclean first (quick clean build)

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
while [ "$QCLEAN" = "" ]; do
read -r -p "${grn}Do you Want to run mka install clean first (quick clean build)?[y or n]" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "OK, Runing mka install clean"
	QCLEAN=y
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "ok, not running mka install clean"
	QCLEAN=n
else echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
fi
done

# Run make clean first (Slow clean build. Will delete entire contents of out folder...)

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
while [ "$CLEAN" = "" ]; do
read -r -p "${grn}Do you Want to Run make clean first (Slow clean build. Will delete entire contents of out folder...)[y or n]?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	read -r -p "${txtrst}${bldred}ARE YOU SURE? THIS ACTION WILL DELETE YOUR ENTIRE OUT FOLDER...${txtrst}" response
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo -e "${grn}OK, running make clean"
		CLEAN=y
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo -e "${grn}ok, not running make clean"
		CLEAN=n
	else echo -e "${txtrst}"
		echo -e "${bldred}"
		echo "Please Press y or n"
		echo -e "${txtrst}"
	fi
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "ok, not running make clean"
	CLEAN=n
else echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
fi
done

# Do you want to make an ota Package?

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
while [ "$OTA" = "" ]; do
read -r -p "${grn}Do you want to make an ota Package?[y or n]" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo -e "${txtrst}${bldblu}OK, Building an OTA"
	echo "If you do not have your OTA build Folder set up, The BUILDBOT will prompt you to set it up before the build..."
	echo "You can set it up yourself now if you would like by placing a full built ROM inside "$SAUCE"/mokee/FULL/UNOFFICIAL/your device name/..."
	echo "If you are building for more than one device, and do not have a full ROM inside its device folder, the BUILDBOT will prompt you to set"
	echo -e "up the OTA build folder before each device is built... To avoid this set up the OTA build folder first.${txtrst}"
	OTA=y
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "ok, not making an OTA Package"
	OTA=n
else echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
fi
done

# Dont touch....

DATE=`eval date +%y``eval date +%m``eval date +%d`
TIMEST=$(date +%Y_%m_%d)
echo -e "${txtrst}"
#----------------------FTP Settings--------------------#
# Set "FTP=y" if you want to enable FTP uploading

echo -e "${txtrst}"
echo -e "${cya}"
while [ "$FTP" = "" ]; do
echo ""
read -r -p "${cya}Do you want to enable FTP uploading?[y or n]" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "OK, Uploading to mokeedev.com"
	FTP=y
elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
	echo "OK, not uploading to mokeedev.com"
	FTP=n
else echo -e "${txtrst}"
	echo -e "${bldred}"
	echo "Please Press y or n"
	echo -e "${txtrst}"
fi
done

# FTP server settings...

	if [ $FTP = "y" ]; then
	
# ftp username
echo -e "${txtrst}"
echo -e "${red}"
read -e -p "What is your mokeedev.com username?" FTPUSER
eval FTPUSER=$FTPUSER

# ftp password

read -s -p "Enter Password:" FTPPASS
eval FTPPASS=$FTPPASS
echo -e "${txtrst}"
	fi
	
# ftp hostname (should not change)

FTPHOST=mokeedev.com

#---------------------Build Bot Code-------------------#
# Very much not a good idea to change this unless you know what you are doing....
# get time of startup

res1=$(date +%s.%N)

echo -e "${txtrst}"
echo -e "${grn}"
echo ""
echo "Moving to source directory..."
cd $SAUCE
echo ""
echo "done!"
echo ""



		if [ $SYNC = "y" ]; then
			echo "Running repo sync..."
			echo ""
			repo sync -j$J
			echo ""
			echo "done!"
			echo ""
		fi

		if [ $CLEAN = "y" ]; then
			echo "Running make clean..."
			echo ""
			make clean
			echo ""
			echo "done!"
		fi

		if [ $CCACHE = "y" ]; then
			echo ""
			echo "using CCACHE..."
			export USE_CCACHE=1
			export CCACHE_DIR=~/.ccache
		fi

echo -e "${txtrst}"

for VAL in "${!LUNCHCMD[@]}"
do

# leave alone

ROFOLDER=$SAUCE/out/target/product/${LUNCHCMD[$VAL]}
OTFOLDER=$SAUCE/mokee/OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}
OTMDFOLDER=$SAUCE/mokee/OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}/md5
ROFTP=FULL/UNOFFICIAL/${LUNCHCMD[$VAL]}/
ROFTPMD5=FULL/UNOFFICIAL/${LUNCHCMD[$VAL]}/md5/
OTAFTP=OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}/
OTAMD5=OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}/md5/
OTABDIR=$SAUCE/mokee/FULL/UNOFFICIAL/${LUNCHCMD[$VAL]}

if [ "$OTA" = "y" ] && [ ! -d "${OTABDIR}" ]; then
	echo -e "${txtrst}${bldred} YOU HAVE SELECTED TO MAKE AN OTA AND THE OTA BUILD FOLDER HAS NOT BEEN SET UP....!!!"
	echo -e "${txtrst}${bldcya}"
	read -r -p "Would you like the BUILDBOT to set up the folder structure for you?" response
	if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo "OK, Setting up ota build DIR"
		mkdir -p ${OTABDIR}
		echo "We have to move a recently built ROM into the OTA build folder so an OTA can be built..."
		read -r -p "Please type the destination to your ROM storage folder (DO NOT END WITH /!!)" response
		USRSTR="$response"
		OLDROM=`ls -t $USRSTR/*".zip" | head -1`
			if [ ! -e "$OLDROM" ]; then
				read -r -p "${USRSTR} Does not contain any .zip files....Would you like to try again? [y or n]" response
					if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
						echo "We have to move a recently built ROM into the OTA build folder so an OTA can be built..."
						read -r -p "Please type the destination to your ROM storage folder (DO NOT END WITH /!!)" response
						USRSTR2=$response
						OLDROM=`ls -t $USRSTR2/*".zip" | head -1`
							if [ ! -e "$OLDROM" ]; then
								echo -e "${txtrst} ${bldred} NOT ROM FOUND SKIPPING OTA!!! ${txtrst}"
								OTAF=y
							else 
								cp $OLDROM $OTABDIR
								echo -e "${txtrst}${bldgrn} OTA Check Passed... Continuing build... ${txtrst}"
								OTAF=n
							fi
					elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
						echo -e "${txtrst}${bldgrn} OK, Not building OTA... Continuing build... ${txtrst}"
						OTAF=y
					fi
			else 
				cp $OLDROM $OTABDIR/
				echo -e "${txtrst} ${bldgrn} OTA Check Passed... Continuing build... ${txtrst}"
				OTAF=n
			fi
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo -e "${txtrst}${bldgrn} OK, Not building OTA... Continuing build... ${txtrst}"
		OTAF=y
		echo -e "${txtrst}"
	fi
					
elif [ "$OTA" = "y" ] && [ ! -e "$OTABDIR"/*".zip" ]; then
	echo -e "${txtrst} ${bldred} YOU HAVE SELECTED TO MAKE AN OTA AND THE OTA BUILD FOLDER DOES NOT HAVE A RECENTLY BUILT ROM INSIDE....!!!"
	echo "YOU MUST HAVE ONE PRE-BUILT FULL ROM IN YOUR OTA BUILD FOLDER TO MAKE AN OTA!!!"
	echo "IF YOU CHOSE TO CONTINUE WITHOUT A ROM IN THE OTA BUILD FOLDER, AN OTA WILL NOT BE BUILT..."
	echo -e "${txtrst} ${bldcya}"
	read -r -p "Would you like the BUILDBOT to place a rom inside the OTA build folder for you?[y or n]" response
		if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo "OK, Setting up OTA build DIR"
		mkdir -p ${OTABDIR}
		read -r -p "Please type the destination to your ROM storage folder (DO NOT END WITH /!!)" response
		USRSTR=$response
		OLDROM=`ls -t $USRSTR/*".zip" | head -1`
			if [ ! -f "$OLDROM" ]; then
				read -r -p "${USRSTR} Does not contain any .zip files....Would you like to try again? [y or n]" response
					if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
						read -r -p "Please type the destination to your ROM storage folder (DO NOT END WITH /!!)" response
						USRSTR2=$response
						OLDROM=`ls -t $USRSTR2/*".zip" | head -1`
							if [ ! -e "$OLDROM" ]; then
								echo -e "${txtrst}${bldred} NOT ROM FOUND SKIPPING OTA${txtrst}!!!"
								OTAF=y
							else
								cp $OLDROM $OTABDIR/
								echo -e "${txtrst}${bldgrn} OTA Check Passed... Continuing build...${txtrst}"
								OTAF=n
							fi
					elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
						echo -e "${txtrst}${bldgrn} OK, Not building OTA... Continuing build...${txtrst}"
						OTAF=y
					fi
			else
				cp $OLDROM $OTABDIR/
				echo -e "${txtrst} ${bldgrn} OTA Check Passed... Continuing build...${txtrst}"
				OTAF=n
			fi
	elif [[ $response =~ ^([Nn]|[nN])$ ]]; then
		echo -e "${txtrst}${bldgrn} OK, Not building OTA... Continuing build...${txtrst}"
		OTAF=y
		echo -e "${txtrst}"
	fi
else echo -e "${bldcya}OTA Build DIR check ready to make an OTA"
		echo -e "Proceeding with build...${txtrst}"
		OTAF=n
fi

echo -e "${grn}"
echo ""
echo "Starting build..."
echo -e "${txtrst}"
. build/envsetup.sh
croot
lunch mk_${LUNCHCMD[$VAL]}-userdebug

		if [ $BP = "y" ]; then
		echo -e "${grn}"
		echo ""
		echo "Removing build.prop..."
		echo ""
		rm $SAUCE/out/target/product/${LUNCHCMD[$VAL]}/system/build.prop
		echo ""
		echo "done!"
		echo -e "${txtrst}"
		fi

		
		
		if [ $QCLEAN = "y" ]; then
		echo -e "${grn}"
		echo ""
		echo "Running make install clean..."
		echo ""
		echo -e "${txtrst}"
		mka installclean
		echo -e "${grn}"
		echo ""
		echo "done!"
		echo -e "${txtrst}"
		fi

# start compilation

mka bacon
echo -e "${grn}"
echo "done!"
echo -e "${txtrst}"

ROM=`ls -t $ROFOLDER/*".zip" | head -1`
	
		if [ $OTA = "y" ] && [ $OTAF = "n" ]; then
				echo -e "${txtrst}"
				echo -e "${bldgrn}"
				echo ""
				echo "Copying ROM to OTA build Dir..."
				cp $ROM $OTABDIR/
				echo ""
				echo "Done."
				echo ""
				echo "Creating OTA.zip"
				echo ""
				echo -e "${txtrst}"
					. build/envsetup.sh
					export MK_OTA_INPUT=$SAUCE/mokee/FULL
					export MK_OTA_EXTRA=$SAUCE/mokee/OTA
						ota_all UNOFFICIAL ${LUNCHCMD[$VAL]}
				echo -e "${bldgrn}"
				echo ""
				echo "Done."
				echo ""
				echo "cleaning up for next time"
				echo ""
					OLDROM=`ls -tr $OTABDIR/*".zip" | head -n 1`
    					rm -rf $OLDROM
				echo ""
    			echo "Removed oldest Rom, Ready For Next Build..."
				echo ""
				echo "Done."
				echo -e "${txtrst}"
		fi
ROMMD=`ls -t $ROFOLDER/*".md5sum" | head -1`

#------------------------------------------------------------FTP UPLOAD START----------------

if  [ $FTP = "y" ]; then
	echo -e "${txtrst}"
	echo -e "${bldgrn}"
	echo ""
	echo "Uploading ROM, MD5SUM, and if you made an OTA package Them as well..."
	echo ""
		curl -v -T $ROM ftp://$FTPUSER:$FTPPASS@$FTPHOST/$ROFTP
		curl -v -T $ROMMD ftp://$FTPUSER:$FTPPASS@$FTPHOST/$ROFTPMD5
			if [ $OTA = "y" ] && [ $OTAF = "n" ]; then
				OTAN=`ls -t $OTFOLDER/*".zip" | head -1`
				OTAMD=`ls -t $OTMDFOLDER/*".md5sum" | head -1`
				curl -v -T $OTAN ftp://$FTPUSER:$FTPPASS@$FTPHOST/$OTAFTP
				curl -v -T $OTAMD ftp://$FTPUSER:$FTPPASS@$FTPHOST/$OTAMD5
			fi
	echo "Done."
	echo -e "${txtrst}"
fi

#------------------------------------------------------------FTP UPLOAD END----------------

	if [ $MOVE = "y" ]; then
		echo -e "${bldgrn}"
		echo ""
		echo "Moving Things to Storage Directorys..."
			mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/ && mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"md5" && mv $ROM $STORAGE/${LUNCHCMD[$VAL]}/ && mv $ROMMD $STORAGE/${LUNCHCMD[$VAL]}/"md5"/
				if [ $OTA = "y" ]; then
				OTAN=`ls -t $OTFOLDER/*".zip" | head -1`
				OTAMD=`ls -t $OTMDFOLDER/*".md5sum" | head -1`
				mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"OTA" && mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/"md5" && mv $OTAN $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/ && mv $OTAMD $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/"md5"/
				echo "Done."
				echo "Cleaning up..."
				rm -rf "out"/"target"/"OTA"
				echo ""
				echo "Done."
				echo ""
			fi
		echo -e "${txtrst}"
	fi
echo -e "${txtrst}"	
echo -e "${red}"
cd $SAUCE
echo -e "${txtrst}"
done
# finished? get elapsed time
echo ""
echo -e "${bldred}"
echo "ALL DONE..."
echo -e "${txtrst}"
res2=$(date +%s.%N)
echo "${bldgrn}Total time elapsed: ${txtrst}${grn}$(echo "($res2 - $res1) / 60"|bc ) minutes ($(echo "$res2 - $res1"|bc ) seconds) ${txtrst}"