#!/bin/bash


# BuildBot script for MoKee Unofficial Developer builds
# Severely modified by:
# daavvis
# Find me on XDA Developers
# Originally written by:
# Shane Faulkner
# http://shanefaulkner.com
# You are free to modify and distribute this code,
# So long as you keep our names and URL in it.
# Lots of thanks go out to TeamBAMF

#-------------------ROMS To Be Built------------------#
# Instructions and examples below:
# Add lines for devices and uncoment as needed for building multiple/single
# devices follow examples below

#LUNCHCMD[0]="m7vzw"			# lunch command used for ROM


LUNCHCMD[1]="p3110"


#LUNCHCMD[2]="p3100"


#LUNCHCMD[3]="m7spr"


#LUNCHCMD[10]="lt013g"


#LUNCHCMD[11]="lt01lte"


#LUNCHCMD[12]="lt01wifi"


#---------------------Build Settings------------------#

# Your build source code directory path. In the example below the build source code directory path is in the "home" folder. If your source code directory is on an external HDD it should look like: //media/your PC username/the name of your storage device/path/to/your/source/code/folder
read -e -p "Enter the path to your build source Directory: " -i "~/mkkk" SAUCE
eval SAUCE=$SAUCE
if [ ! -d "$SAUCE" ]; then
		echo "BOT Could Not Find That Folder, Please Try Again..."
		read -e -p "Enter the path to your build source Directory: " -i "~/mkkk" SAUCE
		eval SAUCE=$SAUCE
			if [ ! -d "$SAUCE" ]; then
				echo "MASSIVE FAIL!!!!"
				echo "Sorry That Directory Doesnt Exist..."
				echo "Please Check Your Directory Structure and try Running the BOT again..."
			exit
			fi
fi
if [ -d "$SAUCE" ]; then
	eval SAUCE=$SAUCE
	cd $SAUCE
fi

# Should the finished ROMS be moved out of the output folder?
# For instance External storage, dropbox, or other cloud storage folder?
read -r -p "Should the finished ROMS be moved to a storage folder?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    MOVE=y
else
    MOVE=n
fi

# Please fill in below the folder they should be moved to.
# The "//" means root. if you are moving to an external HDD you should start with //media/your PC username/name of the storage device An example is below.
# If you are using an external storage device as seen in the example below, be sure to mount it via your file manager (open the drive in a file manager window) or thought the command prompt before you build, or the script will not find your drive.
# If the storage location is on the same drive as your build folder, use a "~/" to begin. It should look like this usually: ~/your storage folder... assuming your storage folder is in your "home" directory.
	if [ $MOVE = "y" ]; then
		read -e -p "Enter the path to your storage Directory: " -i "//media/daavvis/storage/1foronlyme/4.4.2" STORAGE
		eval STORAGE=$STORAGE
	fi

# Sync repositories before build

read -r -p "Should we sync repositories before build?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    SYNC=y
else
    SYNC=n
fi
	if [ $SYNC = "y" ]; then
# Number for the -j parameter (choose a smaller number for slower internet conection... default is usually 4... this only controls how many threads are running during repo sync)
read -e -p "Enter J Parameter (1 for slow internet 16 for fast): " -i "16" J
eval J=$J
	fi
# Do you Want to use ccache?
read -r -p "Do you Want to use ccache?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    CCACHE=y
else
    CCACHE=n
fi
# REMOVE BUILD PROP (recomended for every build, otherwise the date of the build may not be changed, as well as other variables)
read -r -p "Do you Want to remove the build prop before the build (recomended)?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    BP=y
else
    BP=n
fi

# run mka installclean first (quick clean build)
read -r -p "Do you Want to run mka installclean first (quick clean build)?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    QCLEAN=y
else
    QCLEAN=n
fi

# Run make clean first (Slow clean build. Will delete entire contents of out folder...)
read -r -p "Do you Want to Run make clean first (Slow clean build. Will delete entire contents of out folder...)?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    CLEAN=y
else
    CLEAN=n
fi

# Do you want to make an ota Package?
read -r -p "Do you want to make an ota Package?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    OTA=y
else
    OTA=n
fi

# leave alone
ROFOLDER=$SAUCE/out/target/product/${LUNCHCMD[$VAL]}
ROMDFOLDER=$SAUCE/out/target/product/${LUNCHCMD[$VAL]}/md5
OTFOLDER=$SAUCE/mokee/OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}
OTMDFOLDER=$SAUCE/mokee/OTA/UNOFFICIAL/${LUNCHCMD[$VAL]}/md5
ROFTP="FULL"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/
ROFTPMD5="FULL"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/md5/
OTAFTP="OTA"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/
OTAMD5="OTA"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/md5/
OTABDIR=$SAUCE/mokee/FULL/UNOFFICIAL/${LUNCHCMD[$VAL]}
ROM=UNOFFICIAL
DATE=`eval date +%y``eval date +%m``eval date +%d`
TIMEST=$(date +%Y_%m_%d)
#----------------------FTP Settings--------------------#
# Set "FTP=y" if you want to enable FTP uploading
read -r -p "Do you want to enable FTP uploading?" response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
then
    FTP=y
else
    FTP=n
fi

# FTP server settings...
	if [ $FTP = "y" ]; then
# ftp username
read -e -p "What is your mokeedev.com username?" FTPUSER
eval FTPUSER=$FTPUSER
# ftp password
read -s -p "Enter Password: " FTPPASS
eval FTPPASS=$FTPPASS
	fi
# ftp hostname (should not change)
FTPHOST=mokeedev.com

#---------------------Build Bot Code-------------------#
# Very much not a good idea to change this unless you know what you are doing....
# get time of startup
res1=$(date +%s.%N)

echo ""
echo "Moving to source directory..."
cd $SAUCE
echo ""
echo ""
echo "done!"
echo ""
echo ""



		if [ $SYNC = "y" ]; then
			echo ""
			echo "Running repo sync..."
			echo ""
			repo sync -j$J
			echo ""
			echo "done!"
			echo ""
		fi

		if [ $CLEAN = "y" ]; then
			echo ""
			echo "Running make clean..."
			echo ""
			make clean
			echo ""
			echo "done!"
			echo ""
		fi

		if [ $CCACHE = "y" ]; then
			echo ""
			echo "using CCACHE..."
			echo ""
			export USE_CCACHE=1
			export CCACHE_DIR=~/.ccache
		fi



for VAL in "${!LUNCHCMD[@]}"
do

echo ""
echo ""
echo ""
echo "Starting build..."
echo ""
echo ""
echo ""
. build/envsetup.sh
croot
lunch mk_${LUNCHCMD[$VAL]}-userdebug



		if [ $BP = "y" ]; then
		echo ""
		echo "Removing build.prop..."
		echo ""
		rm $SAUCE/out/target/product/${LUNCHCMD[$VAL]}/system/build.prop
		echo ""
		echo "done!"
		echo ""
		fi

		
		
		if [ $QCLEAN = "y" ]; then
		echo ""
		echo "Running make install clean..."
		echo ""
		mka installclean
		echo ""
		echo "done!"
		echo ""
		fi

# start compilation
mka bacon
echo ""
echo ""
echo ""
echo "done!"
echo ""
echo ""
echo ""

cd $SAUCE
	
		if  [ $OTA = "y" ]; then
			echo ""
			echo "Copying ROM to OTA build Dir..."
			echo ""
			mkdir -p $OTABDIR
			cp $SAUCE/out/target/product/${LUNCHCMD[$VAL]}/*$ROM*".zip" $OTABDIR/${LUNCHCMD[$VAL]}/
			echo ""
			echo "Done."
			echo ""
			echo "Creating OTA.zip"
			echo ""
				cd $SAUCE
				. build/envsetup.sh
				export MK_OTA_INPUT=$SAUCE/mokee/FULL
				export MK_OTA_EXTRA=$SAUCE/mokee/OTA
					ota_all UNOFFICIAL ${LUNCHCMD[$VAL]}
			echo ""
			echo "Done."
			echo ""
			echo "cleaning up for next time"
			echo ""
			echo ""
				FILECOUNT=`ls | wc -l`;
				if [ $FILECOUNT > 2 ]
				then
    				cd $STORAGE/${LUNCHCMD[$VAL]} && rm -f $(ls -tr | head -n 1)
			echo ""
    			echo "Removed oldest Rom, Ready For Next Build..."
			echo ""
        			fi
			echo ""
			echo "Done."
			echo ""
		fi
#------------------------------------------------------------FTP UPLOAD START----------------
if  [ $FTP = "y" ]; then
	echo ""
	echo "Uploading ROM, MD5SUM, and if you made an OTA package Them as well..."
	echo ""	
		curl -v -T $ROFOLDER/*".zip" ftp://$FTPUSER:$FTPPASS@$FTPHOST/$ROFTP && curl -v -T $ROMDFOLDER/*".md5sum" ftp://$FTPUSER:$FTPPASS@$FTPHOST/$ROFTPMD5
			if [ $OTA = "y" ]; then
				curl -v -T $OTFOLDER/*".zip" ftp://$FTPUSER:$FTPPASS@$FTPHOST/$OTAFTP && curl -v -T $OTMDFOLDER/*".md5sum" ftp://$FTPUSER:$FTPPASS@$FTPHOST/$OTAMD5
			fi
	echo "Done."
	fi

	if [ $MOVE = "y" ]; then
		echo ""
		echo "Moving ROM to Storage Directory..."
			mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/
			mv $SAUCE/"out"/"target"/"product"/${LUNCHCMD[$VAL]}/*$ROM*".zip" $STORAGE/${LUNCHCMD[$VAL]}/
		echo ""
		echo "Done."
		echo ""
		echo "Moving MD5SUM to Storage Directory"
		echo ""
			mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"md5"
			mv $SAUCE/"out"/"target"/"product"/${LUNCHCMD[$VAL]}/*".md5sum" $STORAGE/${LUNCHCMD[$VAL]}/"md5"/
		echo "Done."
		echo ""
			if [ $OTA = "y" ]; then
				echo "Moving OTA to Storage Directory..."
				echo ""
				mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"OTA"
				mv $SAUCE/"mokee"/"OTA"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/"OTA"*".zip" $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/
				echo "Done."
				echo ""
				echo "Moving OTA md5 to FTP Storage Directory..."
				echo ""
				mkdir -p $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/"md5"
				mv $SAUCE/"mokee"/"OTA"/"UNOFFICIAL"/${LUNCHCMD[$VAL]}/"md5"/*".md5sum" $STORAGE/${LUNCHCMD[$VAL]}/"OTA"/"md5"/
				echo ""
				echo "Done."
			fi
		echo "Cleaning up..."
			rm -rf /"out"/"target"/"OTA"
		echo ""
	fi
		echo "Done."
		echo ""

cd $SAUCE
	echo "ALL DONE..."
	echo ""
	echo ""
	echo ""
# finished? get elapsed time
res2=$(date +%s.%N)
echo "${bldgrn}Total time elapsed: ${txtrst}${grn}$(echo "($res2 - $res1) / 60"|bc ) minutes ($(echo "$res2 - $res1"|bc ) seconds) ${txtrst}"
done
