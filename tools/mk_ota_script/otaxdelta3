#!/bin/bash
#
# Copyright (C) 2013 The MoKee OpenSource Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

TMP=out/target/OTA/tmp

if [ -z "$XDELTA3" ];then
	XDELTA3=xdelta3
fi

realpath(){
cd `dirname $1`
echo $PWD/`basename $1`
}

mkdirp(){
if [ "$1" == "." ];then
	return
fi
if [ "$1" == "/" ];then
	return
fi
  
DIR=`dirname $1`
mkdirp $DIR
BASE=`basename $1`
mkdir $1 2> /dev/null
}

Z1=$(realpath $1) # Old zip
Z2=$(realpath $2) # New zip
OUT=$(realpath $3) # Output

rm -f $OUT

if [ ! -f "$Z1" ];then
	echo "$Z1 not found."
fi

if [ ! -f "$Z2" ];then
	echo "$Z2 not found."
fi

rm -rf $TMP
mkdirp $TMP 2> /dev/null
cd $TMP

mkdirp z1 2> /dev/null
mkdirp z2 2> /dev/null
mkdirp out/patch 2> /dev/null

cd z1
unzip -o $Z1
cd ..
cd z2
unzip -o $Z2
cd ..

mkdirp out/META-INF/com/google/android 2> /dev/null
mv z2/META-INF/com/google/android/update-binary out/META-INF/com/google/android/
mv z2/META-INF/com/google/android/updater-script oldscript
mv z2/boot.img out/boot.img
rm -rf z1/META-INF
rm -rf z2/META-INF
rm z1/system/bin/backuptool.sh
rm z2/system/bin/backuptool.sh
rm z1/boot.img

# Process preinstall
if [ -f z2/system/bin/loadpreinstalls.sh ]; then
    export $(cat z2/system/bin/loadpreinstalls.sh | grep PRELOAD_APP_DIR= | sed 's/\//z2\//1')
    export $(cat z2/system/bin/loadpreinstalls.sh | grep PRELOAD_HASH_DIR= | sed 's/\//z2\//1')

	mkdirp out/$PRELOAD_HASH_DIR 2> /dev/null
	for file in `ls out/$PRELOAD_APP_DIR`; do
		[ -f out/$PRELOAD_APP_DIR/$file ] && md5sum out/$PRELOAD_APP_DIR/$file | cut -d" " -f1 > out/$PRELOAD_HASH_DIR/${file}.md5
	done
fi

# Don't change some customizable files
if [ -f z2/system/bin/bootmenu ] && [ -f z2/system/bin/logwrapper ];then
	mv z2/system/bin/logwrapper out/
fi

rm z2/system/etc/hosts
rm z1/system/etc/hosts
if [ -f z2/system/etc/sysctl.conf ];then
	rm z2/system/etc/sysctl.conf
fi
if [ -f z1/system/etc/sysctl.conf ];then
	rm z1/system/etc/sysctl.conf
fi

if [ -d z2/etc/motorola/bp_nvm_default ];then
	rm -rf z2/system/etc/motorola/bp_nvm_default
	rm -rf z1/system/etc/motorola/bp_nvm_default
fi

if [ -d z2/system/lib/me ];then
	rm -rf z2/system/lib/me
	rm -rf z1/system/lib/me
	rm z1/system/bin/fixril
	rm z2/system/lib/libril_rds.so
	rm z1/system/lib/libril_rds.so
	rm z2/system/lib/libpppd_plugin-ril.so
	rm z1/system/lib/libpppd_plugin-ril.so
	rm z2/system/lib/libril.so
	rm z1/system/lib/libril.so
	rm z2/system/lib/libmoto_ril.so
	rm z1/system/lib/libmoto_ril.so
fi

if [ -d z2/system/bootmenu ];then
	cp -R z2/system/bootmenu out/system/
	rm -R z2/system/bootmenu
fi
if [ -d z1/system/bootmenu ];then
	rm -R z1/system/bootmenu
fi

if [ -d z2/system/etc/init.d ];then
	mkdirp out/system/etc 2> /dev/null
	cp -R z2/system/etc/init.d out/system/etc/
	rm -R z2/system/etc/init.d
fi
if [ -d z1/system/etc/init.d ];then
	rm -R z1/system/etc/init.d
fi

# Generate file list to be removed
for file in $(find z1 -type f -print);do
	newfile=$(echo $file | sed 's/z1/z2/1')
	rfile=$(echo $newfile | sed 's/z2\///1')
	sfile=$(echo $file | sed 's/z1/system/1')
	if [ -f $file ] && [ ! -f $newfile ];then
		echo "delete(\"/$rfile\");" >> deleted.txt
	fi
done

# Process extra or important files
for file in $(find z2 -type f -print); do
    oldfile=$(echo $file | sed 's/z2/z1/1')
    sfile=$(echo $file | sed 's/z2\///1')
    if [ ! -f $oldfile ] && [ -f $file ]; then
		mkdirp `dirname out/$sfile` 2> /dev/null
        cp $file out/$sfile
        rm $file
    fi
done

# Skipping mtd parts
for mtd in $(find z2 -maxdepth 1 -type f); do
    oldmtd=$(echo $mtd | sed 's/z2/z1/1')
    newsha1m=$(sha1sum $mtd | cut -c -40)
    oldsha1m=$(sha1sum $oldmtd | cut -c -40)
    mtdrx=$(echo $mtd | awk -F'/' '{print $NF}' | sed 's/\./\\\./g')
    if [ "$newsha1m" = "$oldsha1m" ]; then
        echo Skipping $mtd
    else
        mv $mtd out/
        rm $oldfile
        cat oldscript | grep "$mtdrx" >> mtd.txt
    fi
done

# Create delta
cd z1
for f in $(find .);do
	EQUIV=../z2/$f
	OUTFILE=../out/patch/$f

	if [ -f $f ];then
		if [ -f $EQUIV ];then
			oldmd5=`md5sum ../z2/$f | cut -d ' ' -f1`
			newmd5=`md5sum $f | cut -d ' ' -f1`
			if [ "$newmd5" == "$oldmd5" ]; then
				echo "skipping: $f"
			else
				echo "delta: $f"
				mkdirp ../out/patch/$(dirname $f) 2> /dev/null
				$XDELTA3 -D -R -e -s $f $EQUIV $OUTFILE.delta
				filepath=`dirname $f | cut -d'.' -f2`
				echo "package_extract_file(\"patch`dirname $f | cut -d'.' -f2`/`basename $f`.delta\", \"/tmp/`basename $f`.delta\");" >> ../applypatch.txt
				echo "run_program(\"/tmp/patcher\", \"`dirname $f | cut -d'.' -f2`/`basename $f`\", \"/tmp/`basename $f`.delta\", \"/tmp/`basename $f`\");" >> ../applypatch.txt
			fi
		fi
	fi
done

cd ..

# Generating updater-script
OLDVERSION=$(cat z1/system/build.prop | grep "ro\.modversion" | sed "s/ //g" | cut -d"=" -f2)
NEWVERSION=$(cat z2/system/build.prop | grep "ro\.modversion" | sed "s/ //g" | cut -d"=" -f2)
echo "ui_print(\"Updating from ${OLDVERSION}\");" >> updater-script
echo "ui_print(\"to ${NEWVERSION} for your device.\");" >> updater-script
echo "ui_print(\"It may take several minutes, please be patient.\");" >> updater-script
# Mount file system
OLD_IFS=$IFS
IFS=$'\n'
for a in `cat oldscript | grep "mount(" | grep -v "unmount" | sort`;do
	if [ "$a" != "$b" ];then
		b=$a
		echo $b >> updater-script
	fi
done
IFS=$OLD_IFS
echo "" >> updater-script
# Verifying system
echo "ui_print(\"Verifying product version...\");" >> updater-script
echo "assert(getprop(\"ro.modversion\") == \"$OLDVERSION\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
echo "" >> updater-script
# Extracting tools
echo "ui_print(\"Unpacking tools...\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
echo "package_extract_file(\"xdelta3\", \"/tmp/xdelta3\");" >> updater-script
echo "set_perm(0, 0, 0755, \"/tmp/xdelta3\");" >> updater-script
echo "package_extract_file(\"patcher\", \"/tmp/patcher\");" >> updater-script
echo "set_perm(0, 0, 0755, \"/tmp/patcher\");" >> updater-script
echo "" >> updater-script
# Apply patch
echo "# ---- start making changes here ----" >> updater-script
echo "" >> updater-script
echo "ui_print(\"Removing unneeded files...\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
if [ -f "deleted.txt" ];then
	cat deleted.txt >> updater-script
	echo "" >> updater-script
fi
echo "delete_recursive(\"/system/etc/init.d\");" >> updater-script
echo "" >> updater-script
echo "ui_print(\"Patching system files...\");" >> updater-script
echo "show_progress(0.200000,0);" >> updater-script
cat applypatch.txt >> updater-script
echo "" >> updater-script
# New files
echo "ui_print(\"Unpacking new files...\");" >> updater-script
echo "show_progress(0.600000,0);" >> updater-script
for dir in $(find z2 -maxdepth 1 -mindepth 1 -type d | awk -F'/' '{print $NF}'); do
    echo "package_extract_dir(\"$dir\", \"/$dir\");" >> updater-script
done
echo "" >> updater-script
# Permissions
echo "ui_print(\"Setting permissions...\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
OLD_IFS=$IFS
IFS=$'\n'
for x in `cat oldscript | grep set_perm`;do
	if [[ ! `echo $x | grep "backuptool"` ]];then
		echo $x >> updater-script
	fi
done
IFS=$OLD_IFS
echo "" >> updater-script
# Extras
if [ -f "mtd.txt" ];then
	echo "ui_print(\"Unpacking extra files...\");" >> updater-script
	cat mtd.txt >> updater-script
	echo "" >> updater-script
fi
# Flash kernel
echo "ui_print(\"Flashing kernel...\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
cat oldscript | grep "package_extract_file(\"boot.img\"" >> updater-script
cat oldscript | grep "write_raw_image(" >> updater-script
cat oldscript | grep "delete(\"/tmp/boot.img\")"  >> updater-script
echo "" >> updater-script
# Clean up
echo "ui_print(\"Cleaning up...\");" >> updater-script
echo "show_progress(0.100000,0);" >> updater-script
echo "delete(\"/tmp/patcher\");" >> updater-script
echo "delete(\"/tmp/xdelta3\");" >> updater-script
for i in `cat oldscript | grep "unmount(" | sort`;do
	if [ "$i" != "$j" ];then
		j=$i
		echo $j >> updater-script
	fi
done
echo "sleep(2);" >> updater-script
echo "" >> updater-script
echo "ui_print(\"Done!\");" >> updater-script
sed -i 's/z2/system/g' updater-script
mv updater-script out/META-INF/com/google/android/updater-script

cd $ANDROID_BUILD_TOP
BINARY1=$(realpath build/tools/mk_ota_script/prebuilt/xdelta3)
BINARY2=$(realpath build/tools/mk_ota_script/prebuilt/patcher)
cd $TMP/out
cp $BINARY1 ./
cp $BINARY2 ./
zip -r $OUT .
cd ../../
rm -rf tmp
